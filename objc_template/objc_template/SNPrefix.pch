//=*********1.0版本*************** stone ***
//#ifndef SNPrefix_pch
//#define SNPrefix_pch
//// Include any system framework and library headers here that should be included in all compilation units.
//// You will also need to set the Prefix Header build setting of one or more of your targets to reference this file.
//#ifdef DEBUG
//#define NSLog(FORMAT, ...) do{fprintf(stderr, "<%s %s:%d>-:%s\n", [[[[NSDate date] dateByAddingTimeInterval:[[NSTimeZone systemTimeZone] secondsFromGMTForDate:[NSDate date]]].description substringWithRange:NSMakeRange(11, 8)] UTF8String],[[[NSString stringWithUTF8String:__FILE__] lastPathComponent] UTF8String], __LINE__, [[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String]);}while(0)
//#else
//#define NSLog
//#endif
//
//#endif /* SNPrefix_pch */
//=************************ stone ***
/**
 *  C++混编错误: Expected unqualified-id
 *
 *  NSObjCRuntim.h 错误. 暂时没找到好的解决办法
 */
//=*********2.0版本 *************** stone ***
#ifndef SNPrefix_pch
#define SNPrefix_pch
// Include any system framework and library headers here that should be included in all compilation units.
// You will also need to set the Prefix Header build setting of one or more of your targets to reference this file.
//=****** NSLog宏  ****************** stone ***
// #ifdef DEBUG
// // #define NSLog(FORMAT, ...) do{fprintf(stderr, "<%s %s:%d>-:%s\n--------------------------------------------------------------------------------------------------\n", [[[[NSDate date] dateByAddingTimeInterval:[[NSTimeZone systemTimeZone] secondsFromGMTForDate:[NSDate date]]].description substringWithRange:NSMakeRange(11, 8)] UTF8String],[[[NSString stringWithUTF8String:__FILE__] lastPathComponent] UTF8String], __LINE__, [[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String]);}while(0)
// #define NSLog(FORMAT, ...) do {fprintf(stderr, "<%s %s:%d>-:%s\n--------------------------------------------------------------------------------------------------\n", [[NSDate.date dateByAddingTimeInterval:[NSTimeZone.systemTimeZone secondsFromGMTForDate:NSDate.date]].description substringWithRange:NSMakeRange(11, 8)].UTF8String, [NSString stringWithUTF8String:__FILE__].lastPathComponent.UTF8String, __LINE__, [NSString stringWithFormat:FORMAT, ##__VA_ARGS__].UTF8String);} while (0);
// // #define NSLog(FORMAT, ...) do {fprintf(stderr, "<%s %s:%d>-:%s\n--------------------------------------------------------------------------------------------------\n", __TIME__, [NSString stringWithUTF8String:__FILE__].lastPathComponent.UTF8String, __LINE__, [NSString stringWithFormat:FORMAT, ##__VA_ARGS__].UTF8String);} while (0)
// // #define DLog(FORMAT, ...) do {printf("\n<%s %s:%d>-:%s\n\n", __TIME__, [NSString stringWithUTF8String:__FILE__].lastPathComponent.UTF8String, __LINE__, [NSString stringWithFormat:FORMAT, ##__VA_ARGS__].UTF8String);} while (0)
// #define DLog(FORMAT, ...) do {printf("<%s %s:%d>-:%s\n--------------------------------------------------------------------------------------------------\n", [[NSDate.date dateByAddingTimeInterval:[NSTimeZone.systemTimeZone secondsFromGMTForDate:NSDate.date]].description substringWithRange:NSMakeRange(11, 8)].UTF8String, [NSString stringWithUTF8String:__FILE__].lastPathComponent.UTF8String, __LINE__, [NSString stringWithFormat:FORMAT, ##__VA_ARGS__].UTF8String);} while (0);
// #else
// #define NSLog
// #define DLog
// #endif

#ifdef DEBUG
// #define NSLog(FORMAT, ...) do {fprintf(stderr, "<%s %s:%d>-:%s\n--------------------------------------------------------------------------------------------------\n", [[NSDate.date dateByAddingTimeInterval:[NSTimeZone.systemTimeZone secondsFromGMTForDate:NSDate.date]].description substringWithRange:NSMakeRange(11, 8)].UTF8String, [NSString stringWithUTF8String:__FILE__].lastPathComponent.UTF8String, __LINE__, [NSString stringWithFormat:FORMAT, ##__VA_ARGS__].UTF8String);} while (0);
// #define NSLog(FORMAT, ...) do {printf("<%s %s:%d>-:▼\n%s\n--------------------------------------------------------------------------------------------------\n", [[NSDate.date dateByAddingTimeInterval:[NSTimeZone.systemTimeZone secondsFromGMTForDate:NSDate.date]].description substringWithRange:NSMakeRange(11, 8)].UTF8String, [NSString stringWithUTF8String:__FILE__].lastPathComponent.UTF8String, __LINE__, [NSString stringWithFormat:FORMAT, ##__VA_ARGS__].UTF8String);} while (0);
#define NSLog(FORMAT, ...) do {printf("<%s %s:%d>-:▼\n\033[1;7;48m %s \033[0m\n--------------------------------------------------------------------------------------------------\n", [[NSDate.date dateByAddingTimeInterval:[NSTimeZone.systemTimeZone secondsFromGMTForDate:NSDate.date]].description substringWithRange:NSMakeRange(11, 8)].UTF8String, [NSString stringWithUTF8String:__FILE__].lastPathComponent.UTF8String, __LINE__, [NSString stringWithFormat:FORMAT, ##__VA_ARGS__].UTF8String);} while (0);
#define RLog(FORMAT, ...) do {printf("<%s %s:%d>-:▼\n\033[1;97;41m %s \033[0m\n--------------------------------------------------------------------------------------------------\n", [[NSDate.date dateByAddingTimeInterval:[NSTimeZone.systemTimeZone secondsFromGMTForDate:NSDate.date]].description substringWithRange:NSMakeRange(11, 8)].UTF8String, [NSString stringWithUTF8String:__FILE__].lastPathComponent.UTF8String, __LINE__, [NSString stringWithFormat:FORMAT, ##__VA_ARGS__].UTF8String);} while (0);
#define GLog(FORMAT, ...) do {printf("<%s %s:%d>-:▼\n\033[1;97;42m %s \033[0m\n--------------------------------------------------------------------------------------------------\n", [[NSDate.date dateByAddingTimeInterval:[NSTimeZone.systemTimeZone secondsFromGMTForDate:NSDate.date]].description substringWithRange:NSMakeRange(11, 8)].UTF8String, [NSString stringWithUTF8String:__FILE__].lastPathComponent.UTF8String, __LINE__, [NSString stringWithFormat:FORMAT, ##__VA_ARGS__].UTF8String);} while (0);
#define BLog(FORMAT, ...) do {printf("<%s %s:%d>-:▼\n\033[1;44;97m %s \033[0m\n--------------------------------------------------------------------------------------------------\n", [[NSDate.date dateByAddingTimeInterval:[NSTimeZone.systemTimeZone secondsFromGMTForDate:NSDate.date]].description substringWithRange:NSMakeRange(11, 8)].UTF8String, [NSString stringWithUTF8String:__FILE__].lastPathComponent.UTF8String, __LINE__, [NSString stringWithFormat:FORMAT, ##__VA_ARGS__].UTF8String);} while (0);
#define DLog(FORMAT, ...) do {printf("<%s %s:%d>-:▼\n\033[1;0;0m %s \033[0m\n--------------------------------------------------------------------------------------------------\n", [[NSDate.date dateByAddingTimeInterval:[NSTimeZone.systemTimeZone secondsFromGMTForDate:NSDate.date]].description substringWithRange:NSMakeRange(11, 8)].UTF8String, [NSString stringWithUTF8String:__FILE__].lastPathComponent.UTF8String, __LINE__, [NSString stringWithFormat:FORMAT, ##__VA_ARGS__].UTF8String);} while (0);
// #define DLog(FORMAT, ...) do {fprintf(stderr,"\n<%s %s:%d>-:%s\n\n", [[NSDate.date dateByAddingTimeInterval:[NSTimeZone.systemTimeZone secondsFromGMTForDate:NSDate.date]].description substringWithRange:NSMakeRange(11, 8)].UTF8String, [NSString stringWithUTF8String:__FILE__].lastPathComponent.UTF8String, __LINE__, [NSString stringWithFormat:FORMAT, ##__VA_ARGS__].UTF8String);} while (0);
#else
#define NSLog
#define RLog
#define GLog
#define BLog
#define DLog
#endif


//=************************ stone ***
#define NSLogRect(rect) NSLog(@"%s x:%.4f, y:%.4f, w:%.4f, h:%.4f", #rect, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height)
#define NSLogSize(size) NSLog(@"%s w:%.4f, h:%.4f", #size, size.width, size.height)
#define NSLogPoint(point) NSLog(@"%s x:%.4f, y:%.4f", #point, point.x, point.y)
#define NSLogEdgeInsets(edgeInsets) NSLog(@"%s top:%.4f, right:%.4f, bottom:%.4f, left:%.4f", #edgeInsets, edgeInsets.top, edgeInsets.right,edgeInsets.bottom,edgeInsets.left)
//=************************ stone ***
// 宏里面的#, 会自动把后面的参数变成C语言的字符串
// 宏的操作原理, 没输入一个字母就会直接把宏右边的拷贝, 并且会自动补齐前面的内容
// 逗号表达式, 只取最右边的值.
// void表示的是"我肯定不用你,你不要给我警告"
// addObserver , 为了keypath的时候防止错误 & 有提示 而做的宏
#define keyPath(objc, keyPath) @(((void)objc.keyPath,#keyPath))
//=========  ============================ stone 🐳 ===========/



//=========  ============================ stone 🐳 ===========/
#define kRGBColor(R, G, B, A) [UIColor colorWithRed:(R)/255.0 green:(G)/255.0 blue:(B)/255.0 alpha:(A)]

//#define SNGlobalBg SNRGBColor(223, 223, 223)
#define kGlobalBackgroundColor SNRGBColor(55, 183, 73, 1.0)

#define kScreenWidth ([UIScreen mainScreen].bounds.size.width)
#define kScreenHeight ([UIScreen mainScreen].bounds.size.height)
#define kScreenBounds ([UIScreen mainScreen].bounds)

#define kNotificationCenter ([NSNotificationCenter defaultCenter])

//=****** 判断机型 ****************** stone ***
#define SCREEN_HEIGHT [UIScreen mainScreen].bounds.size.height

#define IS_IPHONE_4 (SCREEN_HEIGHT == 480)
#define IS_IPHONE_5 (SCREEN_HEIGHT == 568)
#define IS_IPHONE_6 (SCREEN_HEIGHT == 667)
#define IS_IPHONE_6P (SCREEN_HEIGHT == 736)

#define toStringNSInteger(VALUE) [NSString stringWithFormat:@"%ld",VALUE]
#define toStringCGFloat(VALUE) [NSString stringWithFormat:@"%f",VALUE]
#define toStringObject(VALUE) [NSString stringWithFormat:@"%@",VALUE]
#define toStringint(VALUE) [NSString stringWithFormat:@"%d",VALUE]
#define toStringLongLong(VALUE) [NSString stringWithFormat:@"%lld",VALUE]
#define toStringCGRect(VALUE) NSStringFromCGRect(VALUE)
#define toStringCGSize(VALUE) NSStringFromCGSize(VALUE)
#define toStringCGPoint(VALUE) NSStringFromCGSize(VALUE)
#define toStringClass(VALUE) NSStringFromClass(VALUE)

//=****** 个人比较喜欢的字体 ****************** stone ***
// #define kFont [UIFont fontWithName:@"Apple SD Gothic Neo" size:13];
#define MDRThemeColor [UIColor colorWithRed:89/255.0 green:191/255.0 blue:93/255.0 alpha:1.0]
#define HexRGBA(rgbValue, al) [UIColor colorWithRed:((float)((rgbValue&0xFF0000)>>16))/255.0 green:((float)((rgbValue&0xFF00)>>8))/255.0 blue:((float)(rgbValue&0xFF))/255.0 alpha:al]

#define HexRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue&0xFF0000)>>16))/255.0 green:((float)((rgbValue&0xFF00)>>8))/255.0 blue:((float)(rgbValue&0xFF))/255.0 alpha:1.0]
#define NSStringFormat(str)      ([NSString stringWithFormat:@"%@",str])
#define NSFormatString(str)      ((![NSStringFormat(str) isEqualToString:@"<null>"]&&![NSStringFormat(str) isEqualToString:@"(null)"])?NSStringFormat(str):@"")
#define kImageURL(imageUrl) [NSFormatString(imageUrl) rangeOfString:@"http"].length>0?[NSURL URLWithString:[NSString stringWithFormat:@"%@",imageUrl]]:([NSURL URLWithString:[NSString stringWithFormat:@"http://%@%@%@",@"www.geeboo.com/librarys/",@"system/getRes.go?id=",imageUrl]])
// #define kImageWithName(name) [[UIImage imageNamed:name] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]
#define kImageWithBundle(bundleName, imageName) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:[NSString stringWithFormat:@"%@/%@",bundleName, imageName] ofType:nil]]

/*****************************************************************************************/

//默认图片封面
#define kDefaultPictureIcon             (@"Default_Picture")
//                              /*以下内容未做测试*/
/*****************************************************************************************/

//----------------------图片----------------------------

//读取本地图片
#define kLoadImage(file, ofType) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:ofType]]

//定义UIImage对象
#define kImageWithFileName(fileName) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:fileName ofType:nil]]

//定义UIImage对象
//#define ImageNamed(_pointer) [UIImage imageNamed:[UIUtil imageName:_pointer]]

//建议使用前两种宏定义,性能高于后者
//----------------------图片----------------------------
//----------------------系统----------------------------
//判断是真机还是模拟器
#if TARGET_OS_IPHONE
//iPhone Device
#endif

#if TARGET_IPHONE_SIMULATOR
//iPhone Simulator
#endif


//获取当前语言
#define CurrentLanguage ([[NSLocale preferredLanguages] objectAtIndex:0])

//获取系统版本
// #define IOS_VERSION [[[UIDevice currentDevice] systemVersion] floatValue]
// #define currentDeviceVersionFloat [[[UIDevice currentDevice] systemVersion] floatValue]
// #define kCurrentSystemVersionFloat [[[UIDevice currentDevice] systemVersion] floatValue]

//检查系统版本
#define SYSTEM_VERSION_EQUAL_TO(v)                  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedSame)
#define SYSTEM_VERSION_GREATER_THAN(v)              ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending)
#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)
#define SYSTEM_VERSION_LESS_THAN(v)                 ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedAscending)
#define SYSTEM_VERSION_LESS_THAN_OR_EQUAL_TO(v)     ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedDescending)
//----------------------系统----------------------------
/************** performSelector 警告 解决办法 ***************************************************************************/
//#pragma clang diagnostic push
//#pragma clang diagnostic ignored "-Warc-performSelector-leaks"
//[self performSelector:selector];
//#pragma clang diagnostic pop
//************** 打电话 **************************************************************************
#define TELLPHONE(number) [[UIApplication sharedApplication] openURL:[NSURL URLWithString:(number)]]

//=****** 绿色导航条真好看 ****************** stone ***
#define kThemeColor [UIColor colorWithRed:89/255.0 green:191/255.0 blue:93/255.0 alpha:1.0]
//=****** 测试花费时间 ****************** stone ***
#define ExpendTimeInstanceMethod                                                          \
-(void)expendTime : (void (^)())block {                             \
\
double start = CFAbsoluteTimeGetCurrent();                  \
\
block();                                                    \
\
NSLog(@"时间差 %f", CFAbsoluteTimeGetCurrent() - start); \
}
//========= 模仿MJ ============================ stone ===========/
// 弱引用
#define MJWeakSelf __weak typeof(self) weakSelf = self;
// 过期提醒
#define MJRefreshDeprecated(instead) NS_DEPRECATED(2_0, 2_0, 2_0, 2_0, instead)
// 图片路径 //bundle的使用
#define MJRefreshSrcName(file) [@"MJRefresh.bundle" stringByAppendingPathComponent:file]

//#import <objc/message.h>
//// 运行时objc_msgSend
//#define MJRefreshMsgSend(...) ((void (*)(void *, SEL, UIView *))objc_msgSend)(__VA_ARGS__)
//#define MJRefreshMsgTarget(target) (__bridge void *)(target)

// RGB颜色
#define MJRefreshColor(r, g, b) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1.0]

// 文字颜色
#define MJRefreshLabelTextColor MJRefreshColor(90, 90, 90)

// 字体大小
#define MJRefreshLabelFont [UIFont boldSystemFontOfSize:14]

#define kPingFangSCRegular(SIZE) [UIFont fontWithName:@"PingFangSC-Regular" size:SIZE]
#define kPingFangSCMedium(SIZE) [UIFont fontWithName:@"PingFangSC-Medium" size:SIZE]

#define kSystemFont(SIZE) [UIFont systemFontOfSize:SIZE]
#define kFont(SIZE) ([UIFont fontWithName:@"PingFangSC-Regular" size:SIZE])

// 图片不变形大小
#define kImageHeight(image, image_width) (image_width * image.size.height / image.size.width)
#define kImageWidth(image, image_height) (image_height * image.size.width / image.size.height)


//========= 常量用法 ============================ stone ===========/
///** .h文件 */
//// 常量
// #import <UIKit/UIKit.h>
// UIKIT_EXTERN const CGFloat SNhHeaderHeight;
// UIKIT_EXTERN const CGFloat SNhFooterHeight;
// UIKIT_EXTERN const CGFloat SNhFastAnimationDuration;
// UIKIT_EXTERN const CGFloat SNhSlowAnimationDuration;
// UIKIT_EXTERN NSString *const SNhKeyPathContentOffset;
// UIKIT_EXTERN NSString *const SNhKeyPathContentInset;
// UIKIT_EXTERN NSString *const SNhKeyPathContentSize;
// UIKIT_EXTERN NSString *const SNhKeyPathPanState;
//
///** .m文件 */
// #import <UIKit/UIKit.h>
// const CGFloat SNhHeaderHeight           = 0;
// const CGFloat SNhFooterHeight           = 0;
// const CGFloat SNhFastAnimationDuration  = 0;
// const CGFloat SNhSlowAnimationDuration  = 0;
// NSString *const SNhKeyPathContentOffset = @"contentOffset";
// NSString *const SNhKeyPathContentInset  = @"contentInset";
// NSString *const SNhKeyPathContentSize   = @"contentSize";
// NSString *const SNhKeyPathPanState      = @"state";
//========= 自定义的一些headerView ============================ stone ===========/
//#import "SNBaseViewController.h"
//=========  ============================ stone ===========/
// 判断是否为iOS7
#define iOS7 ([[[UIDevice currentDevice] systemVersion] floatValue] >= 7.0)
//========= 循环引用牛B宏 ============================ stone ===========/
/**
 *  强弱引用转换，用于解决代码块（block）与强引用self之间的循环引用问题
 *  调用方式: `@weakify_self`实现弱引用转换，`@strongify_self`实现强引用转换
 *
 *  示例：
 *  @weakify_self
 *  [obj block:^{
 *  @strongify_self
 *      self.property = something;
 *  }];
 */
#ifndef  weakify_self
#if __has_feature(objc_arc)
#define weakify_self autoreleasepool{} __weak __typeof__(self) weakSelf = self;
#else
#define weakify_self autoreleasepool{} __block __typeof__(self) blockSelf = self;
#endif
#endif
#ifndef  strongify_self
#if __has_feature(objc_arc)
#define strongify_self try{} @finally{} __typeof__(weakSelf) self = weakSelf;
#else
#define strongify_self try{} @finally{} __typeof__(blockSelf) self = blockSelf;
#endif
#endif
/**
 *  强弱引用转换，用于解决代码块（block）与强引用对象之间的循环引用问题
 *  调用方式: `@weakify(object)`实现弱引用转换，`@strongify(object)`实现强引用转换
 *
 *  示例：
 *  @weakify(object)
 *  [obj block:^{
 *      @strongify(object)
 *      strong_object = something;
 *  }];
 */
#ifndef  weakify
#if __has_feature(objc_arc)
#define weakify(object)  autoreleasepool{} __weak __typeof__(object) weak##_##object = object;
#else
#define weakify(object)  autoreleasepool{} __block __typeof__(object) block##_##object = object;
#endif
#endif
#ifndef  strongify
#if __has_feature(objc_arc)
#define strongify(object) try{} @finally{} __typeof__(object) strong##_##object = weak##_##object;
#else
#define strongify(object) try{} @finally{} __typeof__(object) strong##_##object = block##_##object;
#endif
#endif
//=========  ============================ stone ===========/
#define kClassToStringValue(obj) NSStringFromClass([obj class])
// NSStringFromClass([self class]);
#define kClassFromStringValue(classNameStringValue) NSClassFromString(classNameStringValue)
// NSClassFromString(@"RootViewController");

// #define kAction(obj,target,SELECTOR,event) ([obj addTarget:target action:NSSelectorFromString(NSStringFromSelector(@selector(SELECTOR))) forControlEvents:event])
#define kAction(obj, target, SELECTOR, event) ([obj addTarget:target action:(@selector(SELECTOR)) forControlEvents:event])
#define kActionSwitch(obj, target, SELECTOR) ([obj addTarget:target action:(@selector(SELECTOR)) forControlEvents:UIControlEventValueChanged])
#define kActionTextField(obj, target, SELECTOR) ([obj addTarget:target action:(@selector(SELECTOR)) forControlEvents:UIControlEventEditingChanged])

// 吐司
#define kToast(containerView, content) { \
  MBProgressHUD *hud = [MBProgressHUD showHUDAddedTo:self.view animated:YES]; \
  hud.mode       = MBProgressHUDModeText;\
  hud.label.text = content;\
  hud.label.font = kPingFangSCRegular(14);\
  hud.offset     = CGPointMake(0.f, MBProgressMaxOffset);\
  [hud hideAnimated:YES afterDelay:3.f];\
}

#define kShadow(view)  view.layer.shadowColor  = HexRGBA(0xa0a0a0, 1.0).CGColor; \
  view.layer.shadowOffset = CGSizeMake(0, 0);\
  view.layer.shadowOpacity = 1;\
  view.layer.shadowRadius  = 1;

#define kBorder(view)  view.layer.borderColor  = HexRGBA(0xcccccc, 1.0).CGColor; \
  view.layer.borderWidth   = 1.0;\
  view.layer.masksToBounds = YES;

// view.layer.cornerRadius  = 4.0;






//=****** 存储路径 ****************** stone ***
// 第一个参数: 搜索的目录
// 第二个参数: 搜索的范围
// 第三个参数: 是否展开? ~ 展开成 /Users/stone

// 第二个参数详解
// NSUserDomainMask是指/user/<userid>/目录，

// NSLocalDomainMask，官方文档说是Local to the current machine—the place to install items available to everyone on this machine.还是不太好理解，
// 应该就是跟NSUserDomainMask相对的一个概念，NSUserDomainMask是针对当前用户的，而NSLocalDomainMask是针对所有用户的，
// 比如Library目录，如果是针对用户的，就是/user/<userid>/Library，而对所有用户的就是/Library。

// NSNetworkDomainMaskt是指/Network目录下的文件夹。

// NSSystemDomainMask是系统目录，现在的Mac在/System目录下只有一个Library目录，这个目录下包含了系统运行的程序和文件。并且所有的SystemDomain的文件夹都是只读的。

// 其实这个enum定义的是domain的概念，不能简单的理解为某个文件夹下的文件，
// 比如NSSystemDomainMask中的Application目录是/Applications，Document目录是/System/Library/Documentation，其实这就没什么意义，因为这个文件夹根本不存在。

#define kDocumentPath [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject]
#define kCachePath [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject]
#define kLibrary [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) lastObject]
#define kHome NSHomeDirectory()
#define kTemporary NSTemporaryDirectory()

#define kDocumentPathWithFileName(FILENAME) ([[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject] stringByAppendingPathComponent:FILENAME])
#define kCachePathWithFileName(FILENAME) ([[NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject] stringByAppendingPathComponent:FILENAME])
#define kLibraryWithFileName(FILENAME) ([[NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) lastObject] stringByAppendingPathComponent:FILENAME])
#define kTemporaryWithFileName(FILENAME) ([NSTemporaryDirectory() stringByAppendingPathComponent:FILENAME])


//=****** 设置角度 ****************** stone ***
#define DEGREES_TO_RADIANS(angle) ((angle) / 180.0 * M_PI)
//由角度获取弧度
#define kDegreesToRadian(angle) (M_PI * (angle) / 180.0)
//有弧度获取角度
#define kRadianToDegrees(radian) (radian*180.0)/(M_PI)

#define kScale(view, sx, sy) (view.transform = CGAffineTransformScale(view.transform, sx, sy))
#define kRotate(view, degrees) (view.transform = CGAffineTransformRotate(view.transform, (M_PI * (degrees) / 180.0)))
#define kRotateWithRadian(view, radian) (view.transform = CGAffineTransformRotate(view.transform, radian))
#define kRotateWithDegrees(view, degrees) (view.transform = CGAffineTransformRotate(view.transform, (M_PI * (degrees) / 180.0)))
#define kTranslate(view, tx, ty) (view.transform = CGAffineTransformTranslate(view.transform, tx, ty))

#define kScaleWithMake(view, sx, sy) (view.transform = CGAffineTransformMakeScale(sx, sy))
#define kRotateWithMake(view, degrees) (view.transform = CGAffineTransformMakeRotation((M_PI * (degrees) / 180.0)))
#define kRotateWithMakeRadian(view, radian) (view.transform = CGAffineTransformMakeRotation(radian))
#define kRotateWithMakeDegrees(view, degrees) (view.transform = CGAffineTransformMakeRotation((M_PI * (degrees) / 180.0)))
#define kTranslateWithMake(view, tx, ty) (view.transform = CGAffineTransformMakeTranslation(tx, ty))

// 自定义view中使用 拖拽
// 使用: - (void)touchesMoved:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event { SNDrag; }
#define SNDrag   UITouch *touch = [touches anyObject];\
CGPoint currentPoint  = [touch locationInView:self];\
CGPoint previousPoint = [touch previousLocationInView:self];\
CGFloat offsetX = currentPoint.x - previousPoint.x;\
CGFloat offsetY = currentPoint.y - previousPoint.y;\
self.transform = CGAffineTransformTranslate(self.transform, offsetX, offsetY);

// 长按手势拖拽
#define SNLongPressDrag ({UIGestureRecognizerState state = sender.state;static CGPoint previousPoint;switch (state) {case UIGestureRecognizerStateBegan: { /* NSLog(@"%s-%@", __func__, @"UIGestureRecognizerStateBegan");*/ previousPoint = [sender locationInView:sender.view.superview];break;}case UIGestureRecognizerStateChanged: { /* NSLog(@"%s-%@", __func__, @"UIGestureRecognizerStateChanged");*/ CGPoint currentPoint = [sender locationInView:sender.view.superview];sender.view.transform = CGAffineTransformTranslate(sender.view.transform, currentPoint.x - previousPoint.x, currentPoint.y - previousPoint.y);previousPoint = currentPoint;break;}case UIGestureRecognizerStateEnded: { /* NSLog(@"%s-%@", __func__, @"UIGestureRecognizerStateEnded");*/ break;}case UIGestureRecognizerStateCancelled: { /* NSLog(@"%s-%@", __func__, @"UIGestureRecognizerStateCancelled");*/ break;}default: { /* NSLog(@"state = %@", state == UIGestureRecognizerStateFailed ? @"UIGestureRecognizerStateFailed" : @"UIGestureRecognizerStatePossible");*/ break;}}})
// Pan手势
#define SNPanDrag ({CGPoint point = [sender translationInView:sender.view];sender.view.transform = CGAffineTransformTranslate(sender.view.transform, point.x, point.y); /* 恢复到初始状态*/ [sender setTranslation:CGPointZero inView:sender.view];dispatch_async(dispatch_get_main_queue(), ^{if (sender.view.left < 0) {sender.view.left = 0;}if (sender.view.right > sender.view.superview.width) {sender.view.right = sender.view.superview.width;}if (sender.view.top < 0) {sender.view.top = 0;}if (sender.view.bottom > sender.view.superview.height) {sender.view.bottom = sender.view.superview.height;}});})
// Pinch手势
#define SNPinchScale ({sender.view.transform = CGAffineTransformScale(sender.view.transform, sender.scale, sender.scale); /* 复位*/ sender.scale = 1;})
// Rotation手势
#define SNRotationRotate ({sender.view.transform = CGAffineTransformRotate(sender.view.transform, sender.rotation); /* "归零" 恢复到最初始的状态*/ sender.rotation       = 0;})

#define kCreateObjectWithString(CLASSNAME)   (id)([[NSClassFromString(CLASSNAME) alloc] init])

#define checkNull(__X__)        (__X__) == nil || [(__X__) isEqual:[NSNull null]] || [(__X__) isEqual:@"null"] ? @"" : [NSString stringWithFormat:@"%@", (__X__)]

#define SNGuideLine ({CGFloat centerX = rect.size.width * 0.5;CGFloat centerY = rect.size.height * 0.5;CGFloat height  = rect.size.height;CGFloat width  = rect.size.width;UIBezierPath *path = [UIBezierPath bezierPath];[HexRGBA(0xFFC1C1, 1.0) setStroke];[path moveToPoint:CGPointMake(centerX, 0)];[path addLineToPoint:CGPointMake(centerX, height)];[path moveToPoint:CGPointMake(0, centerY)];[path addLineToPoint:CGPointMake(width, centerY)];[path stroke];})

// animationWithKeyPath的值：
// transform.scale = 比例轉換
// transform.scale.x = 闊的比例轉換
// transform.scale.y = 高的比例轉換
// transform.rotation.z = 平面圖的旋轉
// opacity = 透明度
// margin
// zPosition
// backgroundColor    背景颜色
// cornerRadius    圆角
// borderWidth
// bounds
// contents
// contentsRect
// cornerRadius
// frame
// hidden
// mask
// masksToBounds
// opacity
// position
// shadowColor
// shadowOffset
// shadowOpacity
// shadowRadius
#define SNTransformScale @"transform.scale"
#define SNTransformScaleX @"transform.scale.x"
#define SNTransformScaleY @"transform.scale.y"
#define SNTransformoRotationZ @"transform.rotation.z"
#define SNTransformoRotationX @"transform.rotation.x"
#define SNTransformoRotationY @"transform.rotation.y"
// 配合 anim.path = path.CGPath使用
#define SNTransformTranslation @"position"
#define SNTransformTranslationX @"position.x"
#define SNTransformTranslationY @"position.y"
#define SNTransformTranslationZ @"zPosition" // 没测试...

#define kStringFormat(FORMAT, ...) ([NSString stringWithFormat:FORMAT, ##__VA_ARGS__])

#define ALERT(msg) ([[[UIAlertView alloc] initWithTitle:nil message:msg delegate:nil cancelButtonTitle:@"confirm" otherButtonTitles:nil] show])

#define kConcat(firstStr, ...) [NSString JoinedWithSubStrings:firstStr,__VA_ARGS__,nil]
#define kFileManager ([NSFileManager defaultManager])

// //正式服务器
// #define API_DOMAIN @"www.jb51.net"
// //测试服务器
// //#define DOMAINXX @"192.168.0.10"
//
// #define API_SYSTEM @"http://"API_DOMAIN@"/system/"
// #define API_USER @"http://"API_DOMAIN@"/user/"

//=========  ============================ stone ===========/
//#import "SNConstants.h"
//#import "Masonry.h"
//#import "SNHTTPManager.h"
//#import "SNFont.h"
//#import "UIViewController+MonitoringNetwork.h"
//#import "SNUtils.h"
//sn_note:========= content ============================ stone 🐳 ===========/
// #import "SNConst.h"
// #import "MJExtension.h"
// #import "UIView+YYAdd.h"
// #import "UIView+Toast.h"
// #import "NSArray+SNArrayExtentsion.h"
// #import "NSDate+Time.h"
// #import "UITableView+FDTemplateLayoutCell.h"
// #import "YYText.h"
// #import "SNOldButton.h"
// #import "MBProgressHUD.h"
// #import "UINavigationBar+SNNavgationBarExtension.h"
// #import "UIImage+SNImageExtension.h"
// #import "UIBezierPath+SNLineColor.h"
// #import "UIColor+SNColorExtension.h"
// #import "SNTools.h"
// #import "NSString+SNStringExtension.h"


//=****** Masonry框架, 需要的时候把注释去掉即可 ****************** stone ***
////define this constant if you want to use Masonry without the 'mas_' prefix
// #define MAS_SHORTHAND
////define this constant if you want to enable auto-boxing for default syntax
// #define MAS_SHORTHAND_GLOBALS
// #import "Masonry.h"
//sn_note:========= UITableView 常用宏 ============================ stone 🐳 ===========/
#define registerForCellFromNib(TableViewName, NibClassName) ([TableViewName registerNib:[UINib nibWithNibName:NSStringFromClass([NibClassName class]) bundle:nil] forCellReuseIdentifier:NSStringFromClass([NibClassName class])])

#define registerForHeaderFooterViewFromNib(TableViewName, NibClassName) ([TableViewName registerNib:[UINib nibWithNibName:NSStringFromClass([NibClassName class]) bundle:nil] forHeaderFooterViewReuseIdentifier:NSStringFromClass([NibClassName class])])

#define registerForCellFromClass(TableViewName, ClassName) ([TableViewName registerClass:[ClassName class] forCellReuseIdentifier:NSStringFromClass([ClassName class])])

#define registerForHeaderFooterViewFromClass(TableViewName, ClassName) ([TableViewName registerClass:[ClassName class] forHeaderFooterViewReuseIdentifier:NSStringFromClass([ClassName class])])

#define DequeueForCell(ClassName) ([tableView dequeueReusableCellWithIdentifier:NSStringFromClass([ClassName class])])

#define DequeueForHeaderFooterView(ClassName) ([tableView dequeueReusableHeaderFooterViewWithIdentifier:NSStringFromClass([ClassName class])])

#define CellDifferentColor(CELL) CELL.contentView.backgroundColor = indexPath.row % 2 == 0 ? [UIColor colorWithRed:247 / 255.0 green:206 / 255.0 blue:166 / 255.0 alpha:1.0] : [UIColor colorWithRed:242 / 255.0 green:154 / 255.0 blue:76 / 255.0 alpha:1.0]

//sn_note:========= UICollectionView 常用宏 ============================ stone 🐳 ===========/
#define registerForCollectionCellFromNib(CollectionViewName, NibClassName) ([CollectionViewName registerNib:[UINib nibWithNibName:NSStringFromClass([NibClassName class]) bundle:nil] forCellWithReuseIdentifier:NSStringFromClass([NibClassName class])])
#define registerForCollectionCellFromClass(CollectionViewName, ClassName) ([CollectionViewName registerClass:[ClassName class] forCellWithReuseIdentifier:NSStringFromClass([ClassName class])])
#define DequeueForCollectionCell(ClassName) ([collectionView dequeueReusableCellWithReuseIdentifier:NSStringFromClass([ClassName class]) forIndexPath:indexPath])


//sn_note:========= content ============================ stone 🐳 ===========/

#define kSetNotDataView SNNotDataView * notDataView = [[SNNotDataView alloc] initWithFrame:CGRectMake(0, 0, [UIScreen mainScreen].bounds.size.width, [UIScreen mainScreen].bounds.size.height-64)];\
notDataView.backgroundColor = [UIColor whiteColor];\
self.sn_notDataView = notDataView;\
notDataView.hidden = YES;\
[self.view addSubview:notDataView];
#define kSetNotNetView     SNNotNetView * notNetView = [[SNNotNetView alloc] initWithFrame:CGRectMake(0, 0, [UIScreen mainScreen].bounds.size.width, [UIScreen mainScreen].bounds.size.height-64)];\
notNetView.backgroundColor = [UIColor whiteColor];\
self.sn_notNetView = notNetView;\
notNetView.hidden = YES;\
[self.view addSubview:notNetView];
//sn_note:=========  ============================ stone 🐳 ===========/
#define GET_ARRAY_LEN(array, len) \
{ len = (sizeof(array) / sizeof(array[0])); }

// #define HexRGBA(rgbValue, al) [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) >> 16)) / 255.0 green:((float)((rgbValue & 0xFF00) >> 8)) / 255.0 blue:((float)(rgbValue & 0xFF)) / 255.0 alpha:al]

//=========  ============================ stone 🐳 ===========/
#endif /* SNPrefix_pch */
